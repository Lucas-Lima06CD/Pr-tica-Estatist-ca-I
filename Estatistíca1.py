{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNrPV+bznadGkJIdDiFgfFn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Importando as bibliotecas**\n"],"metadata":{"id":"f8RVaVDwMNdA"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"4O_T3Q9aJ-em","executionInfo":{"status":"ok","timestamp":1756226104943,"user_tz":180,"elapsed":433,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"outputs":[],"source":["import pandas as pd # Para leitura de Arquivos CSVs\n","import numpy as np # Geração de números aleatórios"]},{"cell_type":"markdown","source":["# **Importando Base de dados**\n"],"metadata":{"id":"RYKDo-S8N6Sb"}},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n","\n","file_name = next(iter(uploaded))\n","Base = pd.read_csv(file_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"nXMQK6laMWp8","executionInfo":{"status":"ok","timestamp":1756226146874,"user_tz":180,"elapsed":25492,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"bd95ff92-4700-4463-f2b4-056cc72ce0f1"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-c9375a2d-defd-49c9-b9c4-b1a11f47230b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-c9375a2d-defd-49c9-b9c4-b1a11f47230b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving iris.csv to iris.csv\n"]}]},{"cell_type":"code","source":["Base"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"pIsWOh4cNe2C","executionInfo":{"status":"ok","timestamp":1756226148727,"user_tz":180,"elapsed":41,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"7764db8a-bf39-4352-f29d-c32e9d89ee4b"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal length  sepal width  petal length  petal width           class\n","0             5.1          3.5           1.4          0.2     Iris-setosa\n","1             4.9          3.0           1.4          0.2     Iris-setosa\n","2             4.7          3.2           1.3          0.2     Iris-setosa\n","3             4.6          3.1           1.5          0.2     Iris-setosa\n","4             5.0          3.6           1.4          0.2     Iris-setosa\n","..            ...          ...           ...          ...             ...\n","145           6.7          3.0           5.2          2.3  Iris-virginica\n","146           6.3          2.5           5.0          1.9  Iris-virginica\n","147           6.5          3.0           5.2          2.0  Iris-virginica\n","148           6.2          3.4           5.4          2.3  Iris-virginica\n","149           5.9          3.0           5.1          1.8  Iris-virginica\n","\n","[150 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-94dd7462-9d6d-42e9-85aa-1dc281301acb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length</th>\n","      <th>sepal width</th>\n","      <th>petal length</th>\n","      <th>petal width</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94dd7462-9d6d-42e9-85aa-1dc281301acb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-94dd7462-9d6d-42e9-85aa-1dc281301acb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-94dd7462-9d6d-42e9-85aa-1dc281301acb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0d70745c-8db8-4a1a-b279-eb9970f0c7e6\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d70745c-8db8-4a1a-b279-eb9970f0c7e6')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0d70745c-8db8-4a1a-b279-eb9970f0c7e6 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_792d3577-a0f6-4755-8e57-9293eb85a786\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Base')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_792d3577-a0f6-4755-8e57-9293eb85a786 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('Base');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Base","summary":"{\n  \"name\": \"Base\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522617,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008414,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Iris-setosa\",\n          \"Iris-versicolor\",\n          \"Iris-virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["# **Amostragem de dados Simples**\n"],"metadata":{"id":"uMIBV64PXxEA"}},{"cell_type":"code","source":["# Verificando o tamaho da base\n","Base.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KfP9fgfjNwDv","executionInfo":{"status":"ok","timestamp":1756226152921,"user_tz":180,"elapsed":14,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"7c655a75-5d52-41a8-8505-c6758b415e4b"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(150, 5)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Gerando semente aleatória para os resultados em várias execuções\n","np.random.seed(2345)"],"metadata":{"id":"7lSqPwjxOUDe","executionInfo":{"status":"ok","timestamp":1756143754228,"user_tz":180,"elapsed":5,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# 150 amostras, intervalo de 0 a 1, com reposição, probabilidades equivalentes\n","amostra = np.random.choice(a = [0,1], size = 150, replace = True, p = [0.7, 0.3])"],"metadata":{"id":"WkK8As72Uxs2","executionInfo":{"status":"ok","timestamp":1756143986403,"user_tz":180,"elapsed":7,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["amostra"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OlKMwPNHVqYa","executionInfo":{"status":"ok","timestamp":1756144118638,"user_tz":180,"elapsed":13,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"e8fa535b-5a7b-4cd4-bf45-802efb1531f6"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0,\n","       0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n","       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["len(amostra[amostra==1])\n","len(amostra[amostra==0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qhYgMzm0WKqo","executionInfo":{"status":"ok","timestamp":1756144225491,"user_tz":180,"elapsed":26,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"f94309f6-49e4-4a7c-b7a3-9fa8a354e803"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["101"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["Base_final = Base.loc[amostra==0]"],"metadata":{"id":"kt1P6ztPWiUT","executionInfo":{"status":"ok","timestamp":1756144474787,"user_tz":180,"elapsed":3,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["Base_final.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oXmArNeoXhnW","executionInfo":{"status":"ok","timestamp":1756144505444,"user_tz":180,"elapsed":41,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"3ddbea53-d31a-425a-c25c-a63f33978f80"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(101, 5)"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# **Amostragem de dados Sistemática**"],"metadata":{"id":"2Af7MyFKfeMd"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from math import ceil #Pega o maior valor de uma divisão de números reais"],"metadata":{"id":"Oie6nSEeXpGI","executionInfo":{"status":"ok","timestamp":1756226156773,"user_tz":180,"elapsed":14,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Criando variáveis para representar uma população, amostra e valor de K\n","população = 150\n","amostra = 15\n","K = ceil(população / amostra)"],"metadata":{"id":"m_L_5T4Jfv8O","executionInfo":{"status":"ok","timestamp":1756227651149,"user_tz":180,"elapsed":3,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["K\n","# Para se obter um valor aleatório, deve-se extrair 5 a cada 60"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wPYY7vN5gYFK","executionInfo":{"status":"ok","timestamp":1756227973118,"user_tz":180,"elapsed":6,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"ecc24e0c-45f5-49e9-f1d2-4a9f4c44ddae"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Definindo um valor randomico para iniciar a amostra, inicio de 1 até k+1\n","r = np.random.randint(low = 1, high= K + 1, size = 1)"],"metadata":{"id":"G8SX5FaBgYpE","executionInfo":{"status":"ok","timestamp":1756227654656,"user_tz":180,"elapsed":2,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["r"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S_sW3V5phW6b","executionInfo":{"status":"ok","timestamp":1756227661452,"user_tz":180,"elapsed":7,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"65cefcfb-36d5-47e3-c437-a8cf3f125a28"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([6])"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# Criando um for para a soma dos próximos valores, com o valor r determinado no script acima\n","# K = 10 e r = 6, logo 10+6 = 16\n","acumulador = r[0]\n","sorteados = []\n","for i in range(amostra):\n","  sorteados.append(acumulador)\n","  acumulador += K"],"metadata":{"id":"EUY_ckghhao3","executionInfo":{"status":"ok","timestamp":1756227744837,"user_tz":180,"elapsed":2,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["sorteados"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y3prumjJVLOG","executionInfo":{"status":"ok","timestamp":1756227753456,"user_tz":180,"elapsed":8,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"db77cd3d-c610-408c-eda9-b21b4cb25a1c"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[np.int64(6),\n"," np.int64(16),\n"," np.int64(26),\n"," np.int64(36),\n"," np.int64(46),\n"," np.int64(56),\n"," np.int64(66),\n"," np.int64(76),\n"," np.int64(86),\n"," np.int64(96),\n"," np.int64(106),\n"," np.int64(116),\n"," np.int64(126),\n"," np.int64(136),\n"," np.int64(146)]"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["# Carregando arquivo csv (Iris)\n","from google.colab import files\n","uploaded = files.upload()\n","\n","file_name = next(iter(uploaded))\n","Base = pd.read_csv(file_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"g5jdAWiAVNU2","executionInfo":{"status":"ok","timestamp":1756228141642,"user_tz":180,"elapsed":6509,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"7bb2ae6d-dc7f-4c71-dda6-536778427d4b"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-7cb9f257-d55f-4576-a29f-da8ac9237eda\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7cb9f257-d55f-4576-a29f-da8ac9237eda\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving iris.csv to iris (1).csv\n"]}]},{"cell_type":"code","source":["# Base_filtrada = filtro da base carregada com o \"Sorteados\"\n","Base_filtrada = Base.loc[sorteados]"],"metadata":{"id":"3XR_vWaEWs0n","executionInfo":{"status":"ok","timestamp":1756228183015,"user_tz":180,"elapsed":5,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["Base_filtrada"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":462},"id":"9pG0mzdpW2Mk","executionInfo":{"status":"ok","timestamp":1756228190175,"user_tz":180,"elapsed":38,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"88780d3f-33c4-43a4-9782-25a40d5a0e6b"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal length  sepal width  petal length  petal width            class\n","6             4.6          3.4           1.4          0.3      Iris-setosa\n","16            5.4          3.9           1.3          0.4      Iris-setosa\n","26            5.0          3.4           1.6          0.4      Iris-setosa\n","36            5.5          3.5           1.3          0.2      Iris-setosa\n","46            5.1          3.8           1.6          0.2      Iris-setosa\n","56            6.3          3.3           4.7          1.6  Iris-versicolor\n","66            5.6          3.0           4.5          1.5  Iris-versicolor\n","76            6.8          2.8           4.8          1.4  Iris-versicolor\n","86            6.7          3.1           4.7          1.5  Iris-versicolor\n","96            5.7          2.9           4.2          1.3  Iris-versicolor\n","106           4.9          2.5           4.5          1.7   Iris-virginica\n","116           6.5          3.0           5.5          1.8   Iris-virginica\n","126           6.2          2.8           4.8          1.8   Iris-virginica\n","136           6.3          3.4           5.6          2.4   Iris-virginica\n","146           6.3          2.5           5.0          1.9   Iris-virginica"],"text/html":["\n","  <div id=\"df-e2f7ec93-8076-4d25-a2d0-4d08ad9b97be\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length</th>\n","      <th>sepal width</th>\n","      <th>petal length</th>\n","      <th>petal width</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>4.6</td>\n","      <td>3.4</td>\n","      <td>1.4</td>\n","      <td>0.3</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>5.4</td>\n","      <td>3.9</td>\n","      <td>1.3</td>\n","      <td>0.4</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>5.0</td>\n","      <td>3.4</td>\n","      <td>1.6</td>\n","      <td>0.4</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>5.5</td>\n","      <td>3.5</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>5.1</td>\n","      <td>3.8</td>\n","      <td>1.6</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>6.3</td>\n","      <td>3.3</td>\n","      <td>4.7</td>\n","      <td>1.6</td>\n","      <td>Iris-versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>5.6</td>\n","      <td>3.0</td>\n","      <td>4.5</td>\n","      <td>1.5</td>\n","      <td>Iris-versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>6.8</td>\n","      <td>2.8</td>\n","      <td>4.8</td>\n","      <td>1.4</td>\n","      <td>Iris-versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>6.7</td>\n","      <td>3.1</td>\n","      <td>4.7</td>\n","      <td>1.5</td>\n","      <td>Iris-versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>5.7</td>\n","      <td>2.9</td>\n","      <td>4.2</td>\n","      <td>1.3</td>\n","      <td>Iris-versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>4.9</td>\n","      <td>2.5</td>\n","      <td>4.5</td>\n","      <td>1.7</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>116</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.5</td>\n","      <td>1.8</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>126</th>\n","      <td>6.2</td>\n","      <td>2.8</td>\n","      <td>4.8</td>\n","      <td>1.8</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>136</th>\n","      <td>6.3</td>\n","      <td>3.4</td>\n","      <td>5.6</td>\n","      <td>2.4</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>Iris-virginica</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2f7ec93-8076-4d25-a2d0-4d08ad9b97be')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e2f7ec93-8076-4d25-a2d0-4d08ad9b97be button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e2f7ec93-8076-4d25-a2d0-4d08ad9b97be');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-f13d8f32-c851-422c-9b2d-351c2a77bd97\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f13d8f32-c851-422c-9b2d-351c2a77bd97')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-f13d8f32-c851-422c-9b2d-351c2a77bd97 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_102658f1-fcbb-4dab-8549-5772e780950c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Base_filtrada')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_102658f1-fcbb-4dab-8549-5772e780950c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('Base_filtrada');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Base_filtrada","summary":"{\n  \"name\": \"Base_filtrada\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"sepal length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7014950021883536,\n        \"min\": 4.6,\n        \"max\": 6.8,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          6.5,\n          5.7,\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4240395309514477,\n        \"min\": 2.5,\n        \"max\": 3.9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2.9,\n          3.9,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6928420734712042,\n        \"min\": 1.3,\n        \"max\": 5.6,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5.6,\n          1.3,\n          4.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7255211591545435,\n        \"min\": 0.2,\n        \"max\": 2.4,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          1.4,\n          0.3,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Iris-setosa\",\n          \"Iris-versicolor\",\n          \"Iris-virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["# **Amostragem de dados Estratificada**"],"metadata":{"id":"1nsOyatSZ0sm"}},{"cell_type":"code","source":["# Carregamento de bibliotecas necessárias\n","import pandas as pd\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"_li-lVRCW37-","executionInfo":{"status":"ok","timestamp":1756229049323,"user_tz":180,"elapsed":3665,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["# Carregamento do arquivo csv pelo google collab\n","from google.colab import files\n","uploaded = files.upload()\n","\n","file_name = next(iter(uploaded))\n","iris = pd.read_csv(file_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"lxVosltjajJW","executionInfo":{"status":"ok","timestamp":1756229211922,"user_tz":180,"elapsed":6443,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"1f2ec762-2faf-4f5e-b2b1-1ca8c0113c3f"},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-15a63319-e866-4042-9587-1a32b23dd21e\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-15a63319-e866-4042-9587-1a32b23dd21e\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving iris.csv to iris (2).csv\n"]}]},{"cell_type":"code","source":["iris[\"class\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"xiJFj1mgbBc8","executionInfo":{"status":"ok","timestamp":1756229315945,"user_tz":180,"elapsed":44,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"a1a4fae2-6a8f-4def-b8c4-d0a8cf9497df"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["class\n","Iris-setosa        50\n","Iris-versicolor    50\n","Iris-virginica     50\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>class</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Iris-setosa</th>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>Iris-versicolor</th>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>Iris-virginica</th>\n","      <td>50</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["# Iris.iloc [:, 0:4] = atributos previsores, dados sobre a pétala e sétala da planta\n","# Iris.iloc [:, 4] = considerando apenas a classe, a especie das 3 plantas\n","# Test_size = Coleta de 50% da base usados para para variáveis X e Y, a f(XY) retorna 4 valores\n","\n","X,_,Y,_ = train_test_split(iris.iloc[:, 0:4], iris.iloc[:, 4], test_size = 0.5, stratify = iris.iloc[:, 4])"],"metadata":{"id":"pu5OhozjbKyA","executionInfo":{"status":"ok","timestamp":1756231778293,"user_tz":180,"elapsed":26,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["Y.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"APWvhYzWklxP","executionInfo":{"status":"ok","timestamp":1756231802375,"user_tz":180,"elapsed":21,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"810ceec4-b739-4c38-96e1-bd4e8ceb68b1"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["class\n","Iris-virginica     25\n","Iris-versicolor    25\n","Iris-setosa        25\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>class</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Iris-virginica</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>Iris-versicolor</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>Iris-setosa</th>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["# **Medidas Centrabilidade e Variabilidade**"],"metadata":{"id":"njUMb53a4vMA"}},{"cell_type":"code","source":["# importando bibliotecas necessárias\n","import numpy as np\n","from scipy import stats"],"metadata":{"id":"qI50MFtZkoWw","executionInfo":{"status":"ok","timestamp":1756237165928,"user_tz":180,"elapsed":6,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["# Criando uma variável de dados\n","X = [234, 290, 567,376,753,2,871,305,2]"],"metadata":{"id":"3hBxnvQG5HSj","executionInfo":{"status":"ok","timestamp":1756237479953,"user_tz":180,"elapsed":3,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["# Média dos do conjuto X\n","np.mean(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eJFt3Qp75gDP","executionInfo":{"status":"ok","timestamp":1756237482152,"user_tz":180,"elapsed":7,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"6a809c77-af43-4137-a2ab-2df4287a3211"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(377.77777777777777)"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["# Mediana\n","np.median(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bZffNuIA5moR","executionInfo":{"status":"ok","timestamp":1756237484262,"user_tz":180,"elapsed":4,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"f89813e1-5eb4-4f18-b8d9-9d21a564b72e"},"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(305.0)"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["# Moda\n","moda = stats.mode(X)\n","moda"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qQqmErjR57O7","executionInfo":{"status":"ok","timestamp":1756237554578,"user_tz":180,"elapsed":33,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"51d12dd0-d0e0-4847-b0bb-b223aecbf888"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ModeResult(mode=np.int64(2), count=np.int64(2))"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["# Criando Variável para geração de quartis (0%, 25%, 50% e 100%)\n","quartis = np.quantile(X, [0, 0.25, 0.50, 1])\n","quartis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KGr3DGBr6Jzv","executionInfo":{"status":"ok","timestamp":1756237656896,"user_tz":180,"elapsed":25,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"499bc161-fbb1-49a4-ab7e-2068b8f785b7"},"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([  2., 234., 305., 871.])"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["# Devio padrão\n","np.std(X, ddof=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9wFBgaqQ6_Ja","executionInfo":{"status":"ok","timestamp":1756237703715,"user_tz":180,"elapsed":7,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"382a735a-cc65-4795-e72e-62745645f336"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(303.3066838110305)"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["stats.describe(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UaAeWaRQ7HhM","executionInfo":{"status":"ok","timestamp":1756237729204,"user_tz":180,"elapsed":29,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"3bef81cc-8546-4999-fdc5-376a2f6e1369"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DescribeResult(nobs=np.int64(9), minmax=(np.int64(2), np.int64(871)), mean=np.float64(377.77777777777777), variance=np.float64(91994.94444444444), skewness=np.float64(0.3298954203708792), kurtosis=np.float64(-0.9947703553605387))"]},"metadata":{},"execution_count":71}]},{"cell_type":"markdown","source":["# **Distribuição Normal**"],"metadata":{"id":"Gvz2a-Bl7hX_"}},{"cell_type":"code","source":["# Importando função norm\n","from scipy.stats import norm"],"metadata":{"id":"V70e2yhV7l2N","executionInfo":{"status":"ok","timestamp":1756237893302,"user_tz":180,"elapsed":3,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["# Em um determinado conjunto de dados onde a média é 8 e o desvio padrão é 2. Determine a a probabilidade de tirar um dado <6\n","norm.cdf(6, 8, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d9LyaLFL743x","executionInfo":{"status":"ok","timestamp":1756238114254,"user_tz":180,"elapsed":42,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"a776cb30-4f30-4233-ffb9-fef2a22f300f"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(0.15865525393145707)"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["# Probabilidade de obter um dado >6\n","norm.sf(6, 8, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tgWEjriG8uzf","executionInfo":{"status":"ok","timestamp":1756238631241,"user_tz":180,"elapsed":6,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"2c90194e-bc63-4d69-a29b-2f6ffa9652c7"},"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(0.8413447460685429)"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["# Probabilidade de obter um dado <6 ou >10\n","norm.cdf(6, 8, 2) + norm.sf(10, 8, 2)\n","# Calculando as probabilidades das duas caudas da distribuição, é a feito a soma das duas probabilidades"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"19wOfDdi-tBo","executionInfo":{"status":"ok","timestamp":1756239695295,"user_tz":180,"elapsed":19,"user":{"displayName":"Lucas Cruz","userId":"17949804156790219961"}},"outputId":"d7370a6e-875f-47c6-c31c-a323d43e4655"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.float64(0.31731050786291415)"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":[],"metadata":{"id":"f2_7Gevl_CfC"},"execution_count":null,"outputs":[]}]}